This is Info file readline.info, produced by Makeinfo-1.64 from the
input file rlman.tex.

   This document describes the GNU Readline Library, a utility which
aids in the consistency of user interface across discrete programs that
need to provide a command line interface.

   Copyright (C) 1988, 1991 Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice pare
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Foundation.


File: readline,  Node: Readline Convenience Functions,  Next: Custom Completers,  Prev: Readline Variables,  Up: Programming with GNU Readline

Readline Convenience Functions
==============================

* Menu:

* Function Naming::	How to give a function you write a name.
* Keymaps::		Making keymaps.
* Binding Keys::	Changing Keymaps.
* Associating Function Names and Bindings::	Translate function names to
						key sequences.
* Allowing Undoing::	How to make your functions undoable.
* Redisplay::		Functions to control line display.
* Modifying Text::	Functions to modify `rl_line_buffer'.
* Utility Functions::	Generally useful functions and hooks.
* Alternate Interface::	Using Readline in a `callback' fashion.


File: readline,  Node: Function Naming,  Next: Keymaps,  Up: Readline Convenience Functions

Naming a Function
-----------------

   The user can dynamically change the bindings of keys while using
Readline.  This is done by representing the function with a descriptive
name.  The user is able to type the descriptive name when referring to
the function.  Thus, in an init file, one might find

     Meta-Rubout:	backward-kill-word

   This binds the keystroke Meta-Rubout to the function *descriptively*
named `backward-kill-word'.  You, as the programmer, should bind the
functions you write to descriptive names as well.  Readline provides a
function for doing that:

 - Function: int rl_add_defun (char *name, Function *function, int key)
     Add NAME to the list of named functions.  Make FUNCTION be the
     function that gets called.  If KEY is not -1, then bind it to
     FUNCTION using `rl_bind_key ()'.

   Using this function alone is sufficient for most applications.  It is
the recommended way to add a few functions to the default functions that
Readline has built in.  If you need to do something other than adding a
function to Readline, you may need to use the underlying functions
described below.


File: readline,  Node: Keymaps,  Next: Binding Keys,  Prev: Function Naming,  Up: Readline Convenience Functions

Selecting a Keymap
------------------

   Key bindings take place on a "keymap".  The keymap is the
association between the keys that the user types and the functions that
get run.  You can make your own keymaps, copy existing keymaps, and tell
Readline which keymap to use.

 - Function: Keymap rl_make_bare_keymap ()
     Returns a new, empty keymap.  The space for the keymap is
     allocated with `malloc ()'; you should `free ()' it when you are
     done.

 - Function: Keymap rl_copy_keymap (Keymap map)
     Return a new keymap which is a copy of MAP.

 - Function: Keymap rl_make_keymap ()
     Return a new keymap with the printing characters bound to
     rl_insert, the lowercase Meta characters bound to run their
     equivalents, and the Meta digits bound to produce numeric
     arguments.

 - Function: void rl_discard_keymap (Keymap keymap)
     Free the storage associated with KEYMAP.

   Readline has several internal keymaps.  These functions allow you to
change which keymap is active.

 - Function: Keymap rl_get_keymap ()
     Returns the currently active keymap.

 - Function: void rl_set_keymap (Keymap keymap)
     Makes KEYMAP the currently active keymap.

 - Function: Keymap rl_get_keymap_by_name (char *name)
     Return the keymap matching NAME.  NAME is one which would be
     supplied in a `set keymap' inputrc line (*note Readline Init
     File::.).

 - Function: char * rl_get_keymap_name (Keymap keymap)
     Return the name matching KEYMAP.  NAME is one which would be
     supplied in a `set keymap' inputrc line (*note Readline Init
     File::.).


File: readline,  Node: Binding Keys,  Next: Associating Function Names and Bindings,  Prev: Keymaps,  Up: Readline Convenience Functions

Binding Keys
------------

   You associate keys with functions through the keymap.  Readline has
several internal keymaps: `emacs_standard_keymap', `emacs_meta_keymap',
`emacs_ctlx_keymap', `vi_movement_keymap', and `vi_insertion_keymap'.
`emacs_standard_keymap' is the default, and the examples in this manual
assume that.

   These functions manage key bindings.

 - Function: int rl_bind_key (int key, Function *function)
     Binds KEY to FUNCTION in the currently active keymap.  Returns
     non-zero in the case of an invalid KEY.

 - Function: int rl_bind_key_in_map (int key, Function *function,
          Keymap map)
     Bind KEY to FUNCTION in MAP.  Returns non-zero in the case of an
     invalid KEY.

 - Function: int rl_unbind_key (int key)
     Bind KEY to the null function in the currently active keymap.
     Returns non-zero in case of error.

 - Function: int rl_unbind_key_in_map (int key, Keymap map)
     Bind KEY to the null function in MAP.  Returns non-zero in case of
     error.

 - Function: int rl_generic_bind (int type, char *keyseq, char *data,
          Keymap map)
     Bind the key sequence represented by the string KEYSEQ to the
     arbitrary pointer DATA.  TYPE says what kind of data is pointed to
     by DATA; this can be a function (`ISFUNC'), a macro (`ISMACR'), or
     a keymap (`ISKMAP').  This makes new keymaps as necessary.  The
     initial keymap in which to do bindings is MAP.

 - Function: int rl_parse_and_bind (char *line)
     Parse LINE as if it had been read from the `inputrc' file and
     perform any key bindings and variable assignments found (*note
     Readline Init File::.).

 - Function: int rl_read_init_file (char *filename)
     Read keybindings and variable assignments from FILENAME (*note
     Readline Init File::.).


File: readline,  Node: Associating Function Names and Bindings,  Next: Allowing Undoing,  Prev: Binding Keys,  Up: Readline Convenience Functions

Associating Function Names and Bindings
---------------------------------------

   These functions allow you to find out what keys invoke named
functions and the functions invoked by a particular key sequence.

 - Function: Function * rl_named_function (char *name)
     Return the function with name NAME.

 - Function: Function * rl_function_of_keyseq (char *keyseq, Keymap
          map, int *type)
     Return the function invoked by KEYSEQ in keymap MAP.  If MAP is
     NULL, the current keymap is used.  If TYPE is not NULL, the type
     of the object is returned in it (one of `ISFUNC', `ISKMAP', or
     `ISMACR').

 - Function: char ** rl_invoking_keyseqs (Function *function)
     Return an array of strings representing the key sequences used to
     invoke FUNCTION in the current keymap.

 - Function: char ** rl_invoking_keyseqs_in_map (Function *function,
          Keymap map)
     Return an array of strings representing the key sequences used to
     invoke FUNCTION in the keymap MAP.

 - Function: void rl_function_dumper (int readable)
     Print the readline function names and the key sequences currently
     bound to them to `rl_outstream'.  If READABLE is non-zero, the
     list is formatted in such a way that it can be made part of an
     `inputrc' file and re-read.

 - Function: void rl_list_funmap_names ()
     Print the names of all bindable Readline functions to
     `rl_outstream'.


File: readline,  Node: Allowing Undoing,  Next: Redisplay,  Prev: Associating Function Names and Bindings,  Up: Readline Convenience Functions

Allowing Undoing
----------------

   Supporting the undo command is a painless thing, and makes your
functions much more useful.  It is certainly easy to try something if
you know you can undo it.  I could use an undo function for the stock
market.

   If your function simply inserts text once, or deletes text once, and
uses `rl_insert_text ()' or `rl_delete_text ()' to do it, then undoing
is already done for you automatically.

   If you do multiple insertions or multiple deletions, or any
combination of these operations, you should group them together into
one operation.  This is done with `rl_begin_undo_group ()' and
`rl_end_undo_group ()'.

   The types of events that can be undone are:

     enum undo_code { UNDO_DELETE, UNDO_INSERT, UNDO_BEGIN, UNDO_END };

   Notice that `UNDO_DELETE' means to insert some text, and
`UNDO_INSERT' means to delete some text.  That is, the undo code tells
undo what to undo, not how to undo it.  `UNDO_BEGIN' and `UNDO_END' are
tags added by `rl_begin_undo_group ()' and `rl_end_undo_group ()'.

 - Function: int rl_begin_undo_group ()
     Begins saving undo information in a group construct.  The undo
     information usually comes from calls to `rl_insert_text ()' and
     `rl_delete_text ()', but could be the result of calls to
     `rl_add_undo ()'.

 - Function: int rl_end_undo_group ()
     Closes the current undo group started with `rl_begin_undo_group
     ()'.  There should be one call to `rl_end_undo_group ()' for each
     call to `rl_begin_undo_group ()'.

 - Function: void rl_add_undo (enum undo_code what, int start, int end,
          char *text)
     Remember how to undo an event (according to WHAT).  The affected
     text runs from START to END, and encompasses TEXT.

 - Function: void free_undo_list ()
     Free the existing undo list.

 - Function: int rl_do_undo ()
     Undo the first thing on the undo list.  Returns `0' if there was
     nothing to undo, non-zero if something was undone.

   Finally, if you neither insert nor delete text, but directly modify
the existing text (e.g., change its case), call `rl_modifying ()' once,
just before you modify the text.  You must supply the indices of the
text range that you are going to modify.

 - Function: int rl_modifying (int start, int end)
     Tell Readline to save the text between START and END as a single
     undo unit.  It is assumed that you will subsequently modify that
     text.


File: readline,  Node: Redisplay,  Next: Modifying Text,  Prev: Allowing Undoing,  Up: Readline Convenience Functions

Redisplay
---------

 - Function: void rl_redisplay ()
     Change what's displayed on the screen to reflect the current
     contents of `rl_line_buffer'.

 - Function: int rl_forced_update_display ()
     Force the line to be updated and redisplayed, whether or not
     Readline thinks the screen display is correct.

 - Function: int rl_on_new_line ()
     Tell the update routines that we have moved onto a new (empty)
     line, usually after ouputting a newline.

 - Function: int rl_reset_line_state ()
     Reset the display state to a clean state and redisplay the current
     line starting on a new line.

 - Function: int rl_message (va_alist)
     The arguments are a string as would be supplied to `printf'.  The
     resulting string is displayed in the "echo area".  The echo area
     is also used to display numeric arguments and search strings.

 - Function: int rl_clear_message ()
     Clear the message in the echo area.


File: readline,  Node: Modifying Text,  Next: Utility Functions,  Prev: Redisplay,  Up: Readline Convenience Functions

Modifying Text
--------------

 - Function: int rl_insert_text (char *text)
     Insert TEXT into the line at the current cursor position.

 - Function: int rl_delete_text (int start, int end)
     Delete the text between START and END in the current line.

 - Function: char * rl_copy_text (int start, int end)
     Return a copy of the text between START and END in the current
     line.

 - Function: int rl_kill_text (int start, int end)
     Copy the text between START and END in the current line to the
     kill ring, appending or prepending to the last kill if the last
     command was a kill command.  The text is deleted.  If START is
     less than END, the text is appended, otherwise prepended.  If the
     last command was not a kill, a new kill ring slot is used.


File: readline,  Node: Utility Functions,  Next: Alternate Interface,  Prev: Modifying Text,  Up: Readline Convenience Functions

Utility Functions
-----------------

 - Function: int rl_read_key ()
     Return the next character available.  This handles input inserted
     into the input stream via PENDING INPUT (*note Readline
     Variables::.) and `rl_stuff_char ()', macros, and characters read
     from the keyboard.

 - Function: int rl_getc (FILE *)
     Return the next character available from the keyboard.

 - Function: int rl_stuff_char (int c)
     Insert C into the Readline input stream.  It will be "read" before
     Readline attempts to read characters from the terminal with
     `rl_read_key ()'.

 - Function: rl_extend_line_buffer (int len)
     Ensure that `rl_line_buffer' has enough space to hold LEN
     characters, possibly reallocating it if necessary.

 - Function: int rl_initialize ()
     Initialize or re-initialize Readline's internal state.

 - Function: int rl_reset_terminal (char *terminal_name)
     Reinitialize Readline's idea of the terminal settings using
     TERMINAL_NAME as the terminal type (e.g., `vt100').

 - Function: int alphabetic (int c)
     Return 1 if C is an alphabetic character.

 - Function: int numeric (int c)
     Return 1 if C is a numeric character.

 - Function: int ding ()
     Ring the terminal bell, obeying the setting of `bell-style'.

   The following are implemented as macros, defined in `chartypes.h'.

 - Function: int uppercase_p (int c)
     Return 1 if C is an uppercase alphabetic character.

 - Function: int lowercase_p (int c)
     Return 1 if C is a lowercase alphabetic character.

 - Function: int digit_p (int c)
     Return 1 if C is a numeric character.

 - Function: int to_upper (int c)
     If C is a lowercase alphabetic character, return the corresponding
     uppercase character.

 - Function: int to_lower (int c)
     If C is an uppercase alphabetic character, return the corresponding
     lowercase character.

 - Function: int digit_value (int c)
     If C is a number, return the value it represents.


File: readline,  Node: Alternate Interface,  Prev: Utility Functions,  Up: Readline Convenience Functions

Alternate Interface
-------------------

   An alternate interface is available to plain `readline()'.  Some
applications need to interleave keyboard I/O with file, device, or
window system I/O, typically by using a main loop to `select()' on
various file descriptors.  To accomodate this need, readline can also
be invoked as a `callback' function from an event loop.  There are
functions available to make this easy.

 - Function: void rl_callback_handler_install (char *prompt, Vfunction
          *lhandler)
     Set up the terminal for readline I/O and display the initial
     expanded value of PROMPT.  Save the value of LHANDLER to use as a
     callback when a complete line of input has been entered.

 - Function: void rl_callback_read_char ()
     Whenever an application determines that keyboard input is
     available, it should call `rl_callback_read_char()', which will
     read the next character from the current input source.  If that
     character completes the line, `rl_callback_read_char' will invoke
     the LHANDLER function saved by `rl_callback_handler_install' to
     process the line.  `EOF' is  indicated by calling LHANDLER with a
     `NULL' line.

 - Function: void rl_callback_handler_remove ()
     Restore the terminal to its initial state and remove the line
     handler.  This may be called from within a callback as well as
     independently.

An Example
----------

   Here is a function which changes lowercase characters to their
uppercase equivalents, and uppercase characters to lowercase.  If this
function was bound to `M-c', then typing `M-c' would change the case of
the character under point.  Typing `M-1 0 M-c' would change the case of
the following 10 characters, leaving the cursor on the last character
changed.

     /* Invert the case of the COUNT following characters. */
     int
     invert_case_line (count, key)
          int count, key;
     {
       register int start, end, i;
     
       start = rl_point;
     
       if (rl_point >= rl_end)
         return (0);
     
       if (count < 0)
         {
           direction = -1;
           count = -count;
         }
       else
         direction = 1;
     
       /* Find the end of the range to modify. */
       end = start + (count * direction);
     
       /* Force it to be within range. */
       if (end > rl_end)
         end = rl_end;
       else if (end < 0)
         end = 0;
     
       if (start == end)
         return (0);
     
       if (start > end)
         {
           int temp = start;
           start = end;
           end = temp;
         }
     
       /* Tell readline that we are modifying the line, so it will save
          the undo information. */
       rl_modifying (start, end);
     
       for (i = start; i != end; i++)
         {
           if (uppercase_p (rl_line_buffer[i]))
             rl_line_buffer[i] = to_lower (rl_line_buffer[i]);
           else if (lowercase_p (rl_line_buffer[i]))
             rl_line_buffer[i] = to_upper (rl_line_buffer[i]);
         }
       /* Move point to on top of the last character changed. */
       rl_point = (direction == 1) ? end - 1 : start;
       return (0);
     }


File: readline,  Node: Custom Completers,  Prev: Readline Convenience Functions,  Up: Programming with GNU Readline

Custom Completers
=================

   Typically, a program that reads commands from the user has a way of
disambiguating commands and data.  If your program is one of these, then
it can provide completion for commands, data, or both.  The following
sections describe how your program and Readline cooperate to provide
this service.

* Menu:

* How Completing Works::	The logic used to do completion.
* Completion Functions::	Functions provided by Readline.
* Completion Variables::	Variables which control completion.
* A Short Completion Example::	An example of writing completer subroutines.


File: readline,  Node: How Completing Works,  Next: Completion Functions,  Up: Custom Completers

How Completing Works
--------------------

   In order to complete some text, the full list of possible completions
must be available.  That is, it is not possible to accurately expand a
partial word without knowing all of the possible words which make sense
in that context.  The Readline library provides the user interface to
completion, and two of the most common completion functions:  filename
and username.  For completing other types of text, you must write your
own completion function.  This section describes exactly what such
functions must do, and provides an example.

   There are three major functions used to perform completion:

  1. The user-interface function `rl_complete ()'.  This function is
     called with the same arguments as other Readline functions
     intended for interactive use:  COUNT and INVOKING_KEY.  It
     isolates the word to be completed and calls `completion_matches
     ()' to generate a list of possible completions.  It then either
     lists the possible completions, inserts the possible completions,
     or actually performs the completion, depending on which behavior
     is desired.

  2. The internal function `completion_matches ()' uses your
     "generator" function to generate the list of possible matches, and
     then returns the array of these matches.  You should place the
     address of your generator function in
     `rl_completion_entry_function'.

  3. The generator function is called repeatedly from
     `completion_matches ()', returning a string each time.  The
     arguments to the generator function are TEXT and STATE.  TEXT is
     the partial word to be completed.  STATE is zero the first time
     the function is called, allowing the generator to perform any
     necessary initialization, and a positive non-zero integer for each
     subsequent call.  When the generator function returns `(char
     *)NULL' this signals `completion_matches ()' that there are no
     more possibilities left.  Usually the generator function computes
     the list of possible completions when STATE is zero, and returns
     them one at a time on subsequent calls.  Each string the generator
     function returns as a match must be allocated with `malloc()';
     Readline frees the strings when it has finished with them.


 - Function: int rl_complete (int ignore, int invoking_key)
     Complete the word at or before point.  You have supplied the
     function that does the initial simple matching selection algorithm
     (see `completion_matches ()').  The default is to do filename
     completion.

 - Variable: Function * rl_completion_entry_function
     This is a pointer to the generator function for `completion_matches
     ()'.  If the value of `rl_completion_entry_function' is `(Function
     *)NULL' then the default filename generator function,
     `filename_completion_function ()', is used.


File: readline,  Node: Completion Functions,  Next: Completion Variables,  Prev: How Completing Works,  Up: Custom Completers

Completion Functions
--------------------

   Here is the complete list of callable completion functions present in
Readline.

 - Function: int rl_complete_internal (int what_to_do)
     Complete the word at or before point.  WHAT_TO_DO says what to do
     with the completion.  A value of `?' means list the possible
     completions.  `TAB' means do standard completion.  `*' means
     insert all of the possible completions.  `!' means to display all
     of the possible completions, if there is more than one, as well as
     performing partial completion.

 - Function: int rl_complete (int ignore, int invoking_key)
     Complete the word at or before point.  You have supplied the
     function that does the initial simple matching selection algorithm
     (see `completion_matches ()' and `rl_completion_entry_function').
     The default is to do filename completion.  This calls
     `rl_complete_internal ()' with an argument depending on
     INVOKING_KEY.

 - Function: int rl_possible_completions (int count, int invoking_key))
     List the possible completions.  See description of `rl_complete
     ()'.  This calls `rl_complete_internal ()' with an argument of `?'.

 - Function: int rl_insert_completions (int count, int invoking_key))
     Insert the list of possible completions into the line, deleting the
     partially-completed word.  See description of `rl_complete ()'.
     This calls `rl_complete_internal ()' with an argument of `*'.

 - Function: char ** completion_matches (char *text, CPFunction
          *entry_func)
     Returns an array of `(char *)' which is a list of completions for
     TEXT.  If there are no completions, returns `(char **)NULL'.  The
     first entry in the returned array is the substitution for TEXT.
     The remaining entries are the possible completions.  The array is
     terminated with a `NULL' pointer.

     ENTRY_FUNC is a function of two args, and returns a `(char *)'.
     The first argument is TEXT.  The second is a state argument; it is
     zero on the first call, and non-zero on subsequent calls.
     ENTRY_FUNC returns a `NULL'  pointer to the caller when there are
     no more matches.

 - Function: char * filename_completion_function (char *text, int state)
     A generator function for filename completion in the general case.
     Note that completion in Bash is a little different because of all
     the pathnames that must be followed when looking up completions
     for a command.  The Bash source is a useful reference for writing
     custom completion functions.

 - Function: char * username_completion_function (char *text, int state)
     A completion generator for usernames.  TEXT contains a partial
     username preceded by a random character (usually `~').  As with all
     completion generators, STATE is zero on the first call and non-zero
     for subsequent calls.


File: readline,  Node: Completion Variables,  Next: A Short Completion Example,  Prev: Completion Functions,  Up: Custom Completers

Completion Variables
--------------------

 - Variable: Function * rl_completion_entry_function
     A pointer to the generator function for `completion_matches ()'.
     `NULL' means to use `filename_entry_function ()', the default
     filename completer.

 - Variable: CPPFunction * rl_attempted_completion_function
     A pointer to an alternative function to create matches.  The
     function is called with TEXT, START, and END.  START and END are
     indices in `rl_line_buffer' saying what the boundaries of TEXT
     are.  If this function exists and returns `NULL', or if this
     variable is set to `NULL', then `rl_complete ()' will call the
     value of `rl_completion_entry_function' to generate matches,
     otherwise the array of strings returned will be used.

 - Variable: CPFunction * rl_filename_quoting_function
     A pointer to a function that will quote a filename in an
     application- specific fashion.  This is called if filename
     completion is being attempted and one of the characters in
     `rl_filename_quote_characters' appears in a completed filename.
     The function is called with TEXT, MATCH_TYPE, and QUOTE_POINTER.
     The TEXT is the filename to be quoted.  The MATCH_TYPE is either
     `SINGLE_MATCH', if there is only one completion match, or
     `MULT_MATCH'.  Some functions use this to decide whether or not to
     insert a closing quote character.  The QUOTE_POINTER is a pointer
     to any opening quote character the user typed.  Some functions
     choose to reset this character.

 - Variable: CPFunction * rl_filename_dequoting_function
     A pointer to a function that will remove application-specific
     quoting characters from a filename before completion is attempted,
     so those characters do not interfere with matching the text
     against names in the filesystem.  It is called with TEXT, the text
     of the word to be dequoted, and QUOTE_CHAR, which is the quoting
     character that delimits the filename (usually `'' or `"').  If
     QUOTE_CHAR is zero, the filename was not in an embedded string.

 - Variable: Function * rl_char_is_quoted_p
     A pointer to a function to call that determines whether or not a
     specific character in the line buffer is quoted, according to
     whatever quoting mechanism the program calling readline uses.  The
     function is called with two arguments: TEXT, the text of the line,
     and INDEX, the index of the character in the line.  It is used to
     decide whether a character found in
     `rl_completer_word_break_characters' should be used to break words
     for the completer.

 - Variable: int rl_completion_query_items
     Up to this many items will be displayed in response to a
     possible-completions call.  After that, we ask the user if she is
     sure she wants to see them all.  The default value is 100.

 - Variable: char * rl_basic_word_break_characters
     The basic list of characters that signal a break between words for
     the completer routine.  The default value of this variable is the
     characters which break words for completion in Bash, i.e., `"
     \t\n\"\\'`@$><=;|&{("'.

 - Variable: char * rl_basic_quote_characters
     List of quote characters which can cause a word break.

 - Variable: char * rl_completer_word_break_characters
     The list of characters that signal a break between words for
     `rl_complete_internal ()'.  The default list is the value of
     `rl_basic_word_break_characters'.

 - Variable: char * rl_completer_quote_characters
     List of characters which can be used to quote a substring of the
     line.  Completion occurs on the entire substring, and within the
     substring `rl_completer_word_break_characters' are treated as any
     other character, unless they also appear within this list.

 - Variable: char * rl_filename_quote_characters
     A list of characters that cause a filename to be quoted by the
     completer when they appear in a completed filename.  The default
     is empty.

 - Variable: char * rl_special_prefixes
     The list of characters that are word break characters, but should
     be left in TEXT when it is passed to the completion function.
     Programs can use this to help determine what kind of completing to
     do.  For instance, Bash sets this variable to "$@" so that it can
     complete shell variables and hostnames.

 - Variable: int rl_completion_append_character
     When a single completion alternative matches at the end of the
     command line, this character is appended to the inserted
     completion text.  The default is a space character (` ').  Setting
     this to the null character (`\0') prevents anything being appended
     automatically.  This can be changed in custom completion functions
     to provide the "most sensible word separator character" according
     to an application-specific command line syntax specification.

 - Variable: int rl_ignore_completion_duplicates
     If non-zero, then disallow duplicates in the matches.  Default is
     1.

 - Variable: int rl_filename_completion_desired
     Non-zero means that the results of the matches are to be treated as
     filenames.  This is *always* zero on entry, and can only be changed
     within a completion entry generator function.  If it is set to a
     non-zero value, directory names have a slash appended and Readline
     attempts to quote completed filenames if they contain any embedded
     word break characters.

 - Variable: int rl_filename_quoting_desired
     Non-zero means that the results of the matches are to be quoted
     using double quotes (or an application-specific quoting mechanism)
     if the completed filename contains any characters in
     `rl_filename_quote_chars'.  This is *always* non-zero on entry,
     and can only be changed within a completion entry generator
     function.  The quoting is effected via a call to the function
     pointed to by `rl_filename_quoting_function'.

 - Variable: int rl_inhibit_completion
     If this variable is non-zero, completion is inhibit<ed.  The
     completion character will be inserted as any other bound to
     `self-insert'.

 - Variable: Function * rl_ignore_some_completions_function
     This function, if defined, is called by the completer when real
     filename completion is done, after all the matching names have
     been generated.  It is passed a `NULL' terminated array of matches.
     The first element (`matches[0]') is the maximal substring common
     to all matches. This function can re-arrange the list of matches
     as required, but each element deleted from the array must be freed.

 - Variable: Function * rl_directory_completion_hook
     This function, if defined, is allowed to modify the directory
     portion of filenames Readline completes.  It is called with the
     address of a string (the current directory name) as an argument.
     It could be used to expand symbolic links or shell variables in
     pathnames.


File: readline,  Node: A Short Completion Example,  Prev: Completion Variables,  Up: Custom Completers

A Short Completion Example
--------------------------

   Here is a small application demonstrating the use of the GNU Readline
library.  It is called `fileman', and the source code resides in
`examples/fileman.c'.  This sample application provides completion of
command names, line editing features, and access to the history list.

     /* fileman.c -- A tiny application which demonstrates how to use the
        GNU Readline library.  This application interactively allows users
        to manipulate files and their modes. */
     
     #include <stdio.h>
     #include <sys/types.h>
     #include <sys/file.h>
     #include <sys/stat.h>
     #include <sys/errno.h>
     
     #include <readline/readline.h>
     #include <readline/history.h>
     
     extern char *getwd ();
     extern char *xmalloc ();
     
     /* The names of functions that actually do the manipulation. */
     int com_list (), com_view (), com_rename (), com_stat (), com_pwd ();
     int com_delete (), com_help (), com_cd (), com_quit ();
     
     /* A structure which contains information on the commands this program
        can understand. */
     
     typedef struct {
       char *name;			/* User printable name of the function. */
       Function *func;		/* Function to call to do the job. */
       char *doc;			/* Documentation for this function.  */
     } COMMAND;
     
     COMMAND commands[] = {
       { "cd", com_cd, "Change to directory DIR" },
       { "delete", com_delete, "Delete FILE" },
       { "help", com_help, "Display this text" },
       { "?", com_help, "Synonym for `help'" },
       { "list", com_list, "List files in DIR" },
       { "ls", com_list, "Synonym for `list'" },
       { "pwd", com_pwd, "Print the current working directory" },
       { "quit", com_quit, "Quit using Fileman" },
       { "rename", com_rename, "Rename FILE to NEWNAME" },
       { "stat", com_stat, "Print out statistics on FILE" },
       { "view", com_view, "View the contents of FILE" },
       { (char *)NULL, (Function *)NULL, (char *)NULL }
     };
     
     /* Forward declarations. */
     char *stripwhite ();
     COMMAND *find_command ();
     
     /* The name of this program, as taken from argv[0]. */
     char *progname;
     
     /* When non-zero, this global means the user is done using this program. */
     int done;
     
     char *
     dupstr (s)
          int s;
     {
       char *r;
     
       r = xmalloc (strlen (s) + 1);
       strcpy (r, s);
       return (r);
     }
     
     main (argc, argv)
          int argc;
          char **argv;
     {
       char *line, *s;
     
       progname = argv[0];
     
       initialize_readline ();	/* Bind our completer. */
     
       /* Loop reading and executing lines until the user quits. */
       for ( ; done == 0; )
         {
           line = readline ("FileMan: ");
     
           if (!line)
             break;
     
           /* Remove leading and trailing whitespace from the line.
              Then, if there is anything left, add it to the history list
              and execute it. */
           s = stripwhite (line);
     
           if (*s)
             {
               add_history (s);
               execute_line (s);
             }
     
           free (line);
         }
       exit (0);
     }
     
     /* Execute a command line. */
     int
     execute_line (line)
          char *line;
     {
       register int i;
       COMMAND *command;
       char *word;
     
       /* Isolate the command word. */
       i = 0;
       while (line[i] && whitespace (line[i]))
         i++;
       word = line + i;
     
       while (line[i] && !whitespace (line[i]))
         i++;
     
       if (line[i])
         line[i++] = '\0';
     
       command = find_command (word);
     
       if (!command)
         {
           fprintf (stderr, "%s: No such command for FileMan.\n", word);
           return (-1);
         }
     
       /* Get argument to command, if any. */
       while (whitespace (line[i]))
         i++;
     
       word = line + i;
     
       /* Call the function. */
       return ((*(command->func)) (word));
     }
     
     /* Look up NAME as the name of a command, and return a pointer to that
        command.  Return a NULL pointer if NAME isn't a command name. */
     COMMAND *
     find_command (name)
          char *name;
     {
       register int i;
     
       for (i = 0; commands[i].name; i++)
         if (strcmp (name, commands[i].name) == 0)
           return (&commands[i]);
     
       return ((COMMAND *)NULL);
     }
     
     /* Strip whitespace from the start and end of STRING.  Return a pointer
        into STRING. */
     char *
     stripwhite (string)
          char *string;
     {
       register char *s, *t;
     
       for (s = string; whitespace (*s); s++)
         ;
     
       if (*s == 0)
         return (s);
     
       t = s + strlen (s) - 1;
       while (t > s && whitespace (*t))
         t--;
       *++t = '\0';
     
       return s;
     }
     
     /* **************************************************************** */
     /*                                                                  */
     /*                  Interface to Readline Completion                */
     /*                                                                  */
     /* **************************************************************** */
     
     char *command_generator ();
     char **fileman_completion ();
     
     /* Tell the GNU Readline library how to complete.  We want to try to complete
        on command names if this is the first word in the line, or on filenames
        if not. */
     initialize_readline ()
     {
       /* Allow conditional parsing of the ~/.inputrc file. */
       rl_readline_name = "FileMan";
     
       /* Tell the completer that we want a crack first. */
       rl_attempted_completion_function = (CPPFunction *)fileman_completion;
     }
     
     /* Attempt to complete on the contents of TEXT.  START and END bound the
        region of rl_line_buffer that contains the word to complete.  TEXT is
        the word to complete.  We can use the entire contents of rl_line_buffer
        in case we want to do some simple parsing.  Return the array of matches,
        or NULL if there aren't any. */
     char **
     fileman_completion (text, start, end)
          char *text;
          int start, end;
     {
       char **matches;
     
       matches = (char **)NULL;
     
       /* If this word is at the start of the line, then it is a command
          to complete.  Otherwise it is the name of a file in the current
          directory. */
       if (start == 0)
         matches = completion_matches (text, command_generator);
     
       return (matches);
     }
     
     /* Generator function for command completion.  STATE lets us know whether
        to start from scratch; without any state (i.e. STATE == 0), then we
        start at the top of the list. */
     char *
     command_generator (text, state)
          char *text;
          int state;
     {
       static int list_index, len;
       char *name;
     
       /* If this is a new word to complete, initialize now.  This includes
          saving the length of TEXT for efficiency, and initializing the index
          variable to 0. */
       if (!state)
         {
           list_index = 0;
           len = strlen (text);
         }
     
       /* Return the next name which partially matches from the command list. */
       while (name = commands[list_index].name)
         {
           list_index++;
     
           if (strncmp (name, text, len) == 0)
             return (dupstr(name));
         }
     
       /* If no names matched, then return NULL. */
       return ((char *)NULL);
     }
     
     /* **************************************************************** */
     /*                                                                  */
     /*                       FileMan Commands                           */
     /*                                                                  */
     /* **************************************************************** */
     
     /* String to pass to system ().  This is for the LIST, VIEW and RENAME
        commands. */
     static char syscom[1024];
     
     /* List the file(s) named in arg. */
     com_list (arg)
          char *arg;
     {
       if (!arg)
         arg = "";
     
       sprintf (syscom, "ls -FClg %s", arg);
       return (system (syscom));
     }
     
     com_view (arg)
          char *arg;
     {
       if (!valid_argument ("view", arg))
         return 1;
     
       sprintf (syscom, "more %s", arg);
       return (system (syscom));
     }
     
     com_rename (arg)
          char *arg;
     {
       too_dangerous ("rename");
       return (1);
     }
     
     com_stat (arg)
          char *arg;
     {
       struct stat finfo;
     
       if (!valid_argument ("stat", arg))
         return (1);
     
       if (stat (arg, &finfo) == -1)
         {
           perror (arg);
           return (1);
         }
     
       printf ("Statistics for `%s':\n", arg);
     
       printf ("%s has %d link%s, and is %d byte%s in length.\n", arg,
               finfo.st_nlink,
               (finfo.st_nlink == 1) ? "" : "s",
               finfo.st_size,
               (finfo.st_size == 1) ? "" : "s");
       printf ("Inode Last Change at: %s", ctime (&finfo.st_ctime));
       printf ("      Last access at: %s", ctime (&finfo.st_atime));
       printf ("    Last modified at: %s", ctime (&finfo.st_mtime));
       return (0);
     }
     
     com_delete (arg)
          char *arg;
     {
       too_dangerous ("delete");
       return (1);
     }
     
     /* Print out help for ARG, or for all of the commands if ARG is
        not present. */
     com_help (arg)
          char *arg;
     {
       register int i;
       int printed = 0;
     
       for (i = 0; commands[i].name; i++)
         {
           if (!*arg || (strcmp (arg, commands[i].name) == 0))
             {
               printf ("%s\t\t%s.\n", commands[i].name, commands[i].doc);
               printed++;
             }
         }
     
       if (!printed)
         {
           printf ("No commands match `%s'.  Possibilties are:\n", arg);
     
           for (i = 0; commands[i].name; i++)
             {
               /* Print in six columns. */
               if (printed == 6)
                 {
                   printed = 0;
                   printf ("\n");
                 }
     
               printf ("%s\t", commands[i].name);
               printed++;
             }
     
           if (printed)
             printf ("\n");
         }
       return (0);
     }
     
     /* Change to the directory ARG. */
     com_cd (arg)
          char *arg;
     {
       if (chdir (arg) == -1)
         {
           perror (arg);
           return 1;
         }
     
       com_pwd ("");
       return (0);
     }
     
     /* Print out the current working directory. */
     com_pwd (ignore)
          char *ignore;
     {
       char dir[1024], *s;
     
       s = getwd (dir);
       if (s == 0)
         {
           printf ("Error getting pwd: %s\n", dir);
           return 1;
         }
     
       printf ("Current directory is %s\n", dir);
       return 0;
     }
     
     /* The user wishes to quit using this program.  Just set DONE non-zero. */
     com_quit (arg)
          char *arg;
     {
       done = 1;
       return (0);
     }
     
     /* Function which tells you that you can't do this. */
     too_dangerous (caller)
          char *caller;
     {
       fprintf (stderr,
                "%s: Too dangerous for me to distribute.  Write it yourself.\n",
                caller);
     }
     
     /* Return non-zero if ARG is a valid argument for CALLER, else print
        an error message and return zero. */
     int
     valid_argument (caller, arg)
          char *caller, *arg;
     {
       if (!arg || !*arg)
         {
           fprintf (stderr, "%s: Argument required.\n", caller);
           return (0);
         }
     
       return (1);
     }


File: readline,  Node: Concept Index,  Next: Function and Variable Index,  Prev: Programming with GNU Readline,  Up: Top

Concept Index
*************

* Menu:

* command editing:                      Readline Bare Essentials.
* editing command lines:                Readline Bare Essentials.
* initialization file, readline:        Readline Init File.
* interaction, readline:                Readline Interaction.
* kill ring:                            Readline Killing Commands.
* killing text:                         Readline Killing Commands.
* notation, readline:                   Readline Bare Essentials.
* readline, function:                   Basic Behavior.
* yanking text:                         Readline Killing Commands.

